{"ast":null,"code":"var isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)); // export function register(config) {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       return;\n//     }\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n//       if (isLocalhost) {\n//         checkValidServiceWorker(swUrl, config);\n//         navigator.serviceWorker.ready.then(() => { });\n//       } else {\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               console.log('Content is cached for offline use.');\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/home/priya/Downloads/blog-tutorials/pdf-preview-react/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","checkValidServiceWorker","swUrl","config","fetch","then","response","contentType","headers","get","status","indexOf","navigator","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log"],"mappings":"AAAA,IAAMA,WAAW,GAAGC,OAAO,CACzBC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,WAA7B,IACEF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,OAD/B,IAEEF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CACE,wDADF,CAHuB,CAA3B,C,CAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,uBAAT,CAAiCC,KAAjC,EAAwCC,MAAxC,EAAgD;AAC9C;AACAC,EAAAA,KAAK,CAACF,KAAD,CAAL,CACGG,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChB;AACA,QAAMC,WAAW,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAApB;;AACA,QACEH,QAAQ,CAACI,MAAT,KAAoB,GAApB,IACCH,WAAW,IAAI,IAAf,IAAuBA,WAAW,CAACI,OAAZ,CAAoB,YAApB,MAAsC,CAAC,CAFjE,EAGE;AACA;AACAC,MAAAA,SAAS,CAACC,aAAV,CAAwBC,KAAxB,CAA8BT,IAA9B,CAAmC,UAAAU,YAAY,EAAI;AACjDA,QAAAA,YAAY,CAACC,UAAb,GAA0BX,IAA1B,CAA+B,YAAM;AACnCR,UAAAA,MAAM,CAACC,QAAP,CAAgBmB,MAAhB;AACD,SAFD;AAGD,OAJD;AAKD,KAVD,MAUO;AACL;AACAC,MAAAA,eAAe,CAAChB,KAAD,EAAQC,MAAR,CAAf;AACD;AACF,GAlBH,EAmBGgB,KAnBH,CAmBS,YAAM;AACXC,IAAAA,OAAO,CAACC,GAAR,CACE,+DADF;AAGD,GAvBH;AAwBD;;AAED,OAAO,SAASL,UAAT,GAAsB;AAC3B,MAAI,mBAAmBJ,SAAvB,EAAkC;AAChCA,IAAAA,SAAS,CAACC,aAAV,CAAwBC,KAAxB,CAA8BT,IAA9B,CAAmC,UAAAU,YAAY,EAAI;AACjDA,MAAAA,YAAY,CAACC,UAAb;AACD,KAFD;AAGD;AACF","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n// export function register(config) {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       return;\n//     }\n\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n//       if (isLocalhost) {\n//         checkValidServiceWorker(swUrl, config);\n//         navigator.serviceWorker.ready.then(() => { });\n//       } else {\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               console.log('Content is cached for offline use.');\n\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}